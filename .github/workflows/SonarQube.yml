name: SonarQube Analysis

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  build:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
  
    services:
        mysql:
            image: mysql:5.7
            env:
              MYSQL_ROOT_PASSWORD: mideporte_root_password
              MYSQL_DATABASE: mideportedb
              MYSQL_USER: mideporte_user
              MYSQL_PASSWORD: mideporte_password
            ports:
              - 3306:3306
            options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          coverage run --source=backend backend/manage.py test
          coverage xml -o coverage-backend.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # --- PASOS PARA INTEGRACIÓN CON DEFECTDOJO ---

      - name: Obtener Informe de Issues de SonarCloud API
        id: get_sonar_issues
        # Opcional: pequeña espera por si el análisis tarda en procesarse en SonarCloud
        run: |
          sleep 20 
          echo "Obteniendo issues de SonarCloud (${{ env.SONAR_HOST_URL }})..."
          # Ajusta los 'types' y 'statuses' si necesitas otros distintos
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ env.SONAR_HOST_URL }}/api/issues/search?componentKeys=${{ env.SONAR_PROJECT_KEY }}&types=VULNERABILITY,BUG&statuses=OPEN,CONFIRMED,REOPENED&ps=500" \
            -o sonarcloud-issues.json
          
          echo "Informe de issues guardado en sonarcloud-issues.json"
          if [ ! -s sonarcloud-issues.json ]; then
            echo "Error: El archivo sonarcloud-issues.json no se creó o está vacío."
            echo "Puede que el análisis de SonarCloud aún no haya terminado o haya fallado."
            exit 1
          else
            echo "Archivo sonarcloud-issues.json generado correctamente."
            # Opcional: Muestra las primeras líneas para depuración
            # head sonarcloud-issues.json 
          fi

      - name: Cargar Informe a DefectDojo API
        # Asegúrate que DEFECTDOJO_HOST incluye http:// o https:// y el puerto si no es estándar
        # Ejemplo: http://tu-ip-publica:8080 o https://defectdojo.tu-dominio.com
        run: |
          echo "Cargando informe a DefectDojo (${{ secrets.DEFECTDOJO_HOST }})..."
          curl -X POST "${{ secrets.DEFECTDOJO_HOST }}/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -F "scan_type=SonarQube API Import" \
            -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
            -F "file=@sonarcloud-issues.json" \
            -F "active=true" \
            -F "verified=true" \
            --fail # Falla si la respuesta HTTP es un error (4xx/5xx)
          echo "Carga a DefectDojo completada (o fallida si curl devolvió error)."