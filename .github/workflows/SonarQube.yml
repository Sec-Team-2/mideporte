name: SonarQube Analysis

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  build:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    env:
      SONAR_PROJECT_KEY: Sec-Team-2_mideporte
      SONAR_HOST_URL: https://sonarcloud.io 
  
    services:
        mysql:
            image: mysql:5.7
            env:
              MYSQL_ROOT_PASSWORD: mideporte_root_password
              MYSQL_DATABASE: mideportedb
              MYSQL_USER: mideporte_user
              MYSQL_PASSWORD: mideporte_password
            ports:
              - 3306:3306
            options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          coverage run --source=backend backend/manage.py test
          coverage xml -o coverage-backend.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v2.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # --- PASOS PARA INTEGRACIÓN CON DEFECTDOJO ---

      - name: Get data from SonarCloud
        id: get_sonar_issues
        run: |
          # Define la URL de la API usando las variables de entorno del Job
          API_URL="${{ env.SONAR_HOST_URL }}/api/issues/search?componentKeys=${{ env.SONAR_PROJECT_KEY }}&types=VULNERABILITY,BUG&statuses=OPEN,CONFIRMED,REOPENED&ps=500"
          
          # Imprime la URL para depuración
          echo "DEBUG: URL construida: $API_URL" 
          
          # Opcional: pequeña espera
          sleep 20 
          
          echo "Obteniendo issues de SonarCloud (${{ env.SONAR_HOST_URL }})..." 
          
          # Ejecuta curl usando la variable API_URL definida arriba
          # Añadido --fail para que falle si hay error HTTP
          curl -s --fail -u "${{ secrets.SONAR_TOKEN }}:" \
            "$API_URL" \
            -o sonarcloud-issues.json
          
          # Guarda el código de salida de curl ANTES de ejecutar otros comandos
          CURL_EXIT_CODE=$? 
          
          # Imprime el código de salida de curl
          echo "Comando curl finalizado. Código de salida: $CURL_EXIT_CODE" 
          
          echo "--- DEBUG: Comprobando archivo generado ---"
          ls -l sonarcloud-issues.json # Muestra si existe y el tamaño
          echo "--- DEBUG: Primeras 10 líneas del archivo ---"
          # Usamos cat y pipe a head por si el archivo es muy pequeño o no existe
          cat sonarcloud-issues.json | head -n 10 
          echo "--- FIN DEBUG ---"
          
          # Comprueba si curl falló O si el archivo está vacío/no existe
          if [ "$CURL_EXIT_CODE" -ne 0 ] || [ ! -s sonarcloud-issues.json ]; then
            echo "Error: Fallo al obtener issues de SonarCloud (Curl exit: $CURL_EXIT_CODE) o el archivo está vacío/no existe."
            exit 1
          else
            echo "Archivo sonarcloud-issues.json generado correctamente."
          fi

      - name: Upload data toDefectDojo
        run: |
          echo "Cargando informe a DefectDojo (${{ secrets.DEFECTDOJO_HOST }})..."
          curl -X POST "${{ secrets.DEFECTDOJO_HOST }}/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -F "scan_type=SonarQube API Import" \
            -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
            -F "file=@sonarcloud-issues.json" \
            -F "active=true" \
            -F "verified=true" \
            --fail # Falla si la respuesta HTTP es un error (4xx/5xx)
          echo "Carga a DefectDojo completada (o fallida si curl devolvió error)."